version: '2'
services:
  mongodb:
    image: mongo:6-jammy
    ports:
      - '27018:27017'
    volumes:
      - /mounts/rent-app/mongodb:/data/db
    networks:
      - rent-app-network


  eureka-server:
    container_name: eureka-server
    image: iaukhim/eureka-server
    ports:
      - 8761:8761
    networks:
      - rent-app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "localhost:8989/actuator/health" ]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 10s


  review-service:
    depends_on:
      mongodb:
        condition: service_started
      eureka-server:
        condition: service_healthy
    container_name: review-service
    image: iaukhim/review-service
    ports:
      - 8586:8586
    networks:
      - rent-app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "localhost:8989/actuator/health" ]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 10s


  db-postgres:
    container_name: postgres-docker-container
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5444:5432"
    volumes:
      - /rent-app-db/postgresql:/var/lib/postgresql
    networks:
      - rent-app-network


  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: "ivan.aukhim@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
    volumes:
      - /home/user/pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    networks:
      - rent-app-network


  config-server:
    container_name: config-server-container
    image: iaukhim/config-server:latest
    volumes:
      - /home/user/certificates/config-server:/certificates/
      - /home/user/certificates/github:/root/.ssh/
    ports:
      - "8888:8888"
    expose:
      - 8989
    networks:
      - rent-app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "localhost:8989/actuator/health"]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 10s

  errors-listener-service:
    container_name: errors-listener-service-container
    image: iaukhim/errors-listener-service:latest
    networks:
      - rent-app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "localhost:8989/actuator/health" ]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 10s


  rent-app:
    depends_on:
      config-server:
        condition: service_healthy
        restart: true
      db-postgres:
        condition: service_started
      eureka-server:
        condition: service_healthy
      review-service:
        condition: service_healthy
      broker:
        condition: service_started
      errors-listener-service:
        condition: service_healthy
    container_name: rent-app
    image: iaukhim/rent-app:latest
    volumes:
      - /home/user/certificates/rent-app:/certificates/
    ports:
      - "8088:8080"
    networks:
      - rent-app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - rent-app-network

  broker:
    depends_on:
      zookeeper:
        condition: service_started
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    networks:
      - rent-app-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
networks:
  rent-app-network:
    driver: bridge